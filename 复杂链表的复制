/*输入一个复杂链表（每个节点中有节点值，以及两个指针，一个指向下一个节点，另一个特殊指针指向任意一个节点），返回结果为复制后复杂链表的head。（注意，输出
结果中请不要返回参数中的节点引用，否则判题程序会直接返回空）*/
/*
public class RandomListNode {
    int label;
    RandomListNode next = null;
    RandomListNode random = null;

    RandomListNode(int label) {
        this.label = label;
    }
}
*/

//先复制成单向链表(不管random),原链表存入oldlist,旧链表存入newlist,然后依次得到oldlist每个节点的random所在位置,让newlist的节点也指向对应位置的节点
import java.util.*;
public class Solution {
    public RandomListNode Clone(RandomListNode pHead)
    {
        ArrayList<RandomListNode> oldlist=new ArrayList<>();
        ArrayList<RandomListNode> newlist=new ArrayList<>();
        if(pHead==null)
            return null;
        RandomListNode p=pHead.next,first=new RandomListNode(pHead.label);
        oldlist.add(pHead);
        newlist.add(first);
        RandomListNode reserve=first,res=first;
        while(p!=null){
            oldlist.add(p);
            RandomListNode newNode=new RandomListNode(p.label);
            newlist.add(newNode);
            first.next=newNode;
            first=newNode;
            p=p.next;
        }
        while(pHead!=null){
            if(pHead.random!=null){
                int temp=oldlist.indexOf(pHead.random);
                reserve.random=newlist.get(temp);
            }
            pHead=pHead.next;
            reserve=reserve.next;
        }
        return res;
    }
}
