/*输入两个整数序列，第一个序列表示栈的压入顺序，请判断第二个序列是否可能为该栈的弹出顺序。假设压入栈的所有数字均不相等。例如序列1,2,3,4,5是某栈的压入顺
序，序列4,5,3,2,1是该压栈序列对应的一个弹出序列，但4,3,5,1,2就不可能是该压栈序列的弹出序列。（注意：这两个序列的长度是相等的）*/

//思路:当前数字相同,迭代判断前一个位置及之后位置的数字是否和popA的下一个数字相同
import java.util.ArrayList;

public class Solution {
    static int[] popA;
    static int length;
    public boolean IsPopOrder(int [] pushA,int [] popA) {
        Solution.popA=popA;
        Solution.length=popA.length;
        ArrayList<Integer> array=new ArrayList<>();
        for(int i=0;i<length;i++){
            array.add(pushA[i]);
        }
        
        for(int i=0;i<length;i++){
            if(pushA[i]==popA[0]&&isPopOrder(i,0,array))
                return true;
        }
        return false;

    }
    public boolean isPopOrder(int index1,int index2,ArrayList<Integer> array){
        if(index2==length)
            return true;
        if(index1<0||index1>=array.size())
            return false;
        
        if(array.get(index1)==popA[index2]){
            ArrayList<Integer> newArray=(ArrayList<Integer>)array.clone();
            newArray.remove(index1);
            index2++;
            for(int i=index1-1;i<=newArray.size();i++){
                if(isPopOrder(i,index2,newArray))
                    return true;
            }
        }
        return false;
    }
}
