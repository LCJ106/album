/*定义栈的数据结构，请在该类型中实现一个能够得到栈中所含最小元素的min函数（时间复杂度应为O（1））。*/

//存储元素的栈使用stack1,  stack2是辅助栈,存储每新加一个元素时对应的最小值
//stack2不可以只存储一个最小值,不然pop()时无法得到之前元素的最小值
import java.util.Stack;
public class Solution {

   Stack<Integer> stack1=new Stack<>();
    Stack<Integer> stack2=new Stack<>();
    public void push(int node) {
        stack1.push(node);
        if(stack2.isEmpty())
            stack2.push(node);
        else if(node<=stack2.peek()){
            //stack2.pop();
            stack2.push(node);
        }
        else
            stack2.push(stack2.peek());

    }

    public void pop() {
            stack2.pop();
    }

    public int top() {
        return stack1.peek();
    }

    public int min() {
        return stack2.peek();

    }
}
